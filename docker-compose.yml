version: '3.7'
services:
  backend: &backend
    image: geometalab/fog
    build:
      context: backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/highfog
    env_file:
      - .env
    entrypoint: dockerize -wait tcp://database:5432 -timeout 30s
    command: python run.py
    environment:
      INTERNAL_UPDATE_HOST: 'http://backend:8080/'
      DATABASE_URL: 'postgresql://highfog:highfog@database:5432/fog'
      TEST_DATABASE_URL: 'postgresql://highfog:highfog@test-database:5432/fog'
      ELEVATION_SERVICE_URL: http://swiss-heights:5000/dtm/v1/elevation
    depends_on:
      - database
      - test-database
  updater:
    <<: *backend
    entrypoint: dockerize -wait tcp://backend:8080 -timeout 30s
    command: python run_scheduled.py
  database:
    image: postgis/postgis:13-3.0
    environment:
      POSTGRES_PASSWORD: 'highfog'
      POSTGRES_USER: 'highfog'
      POSTGRES_DB: 'fog'
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: example@example.com
      PGADMIN_DEFAULT_PASSWORD: a-secure!password1
      PGADMIN_LISTEN_PORT: 8999
    ports:
      - "8999:8999"
  test-database:
    image: postgis/postgis:13-3.0
    environment:
      POSTGRES_PASSWORD: 'highfog'
      POSTGRES_USER: 'highfog'
      POSTGRES_DB: 'fog'
  swiss-heights:
    image: geometalab/elevation-service:switzerland
  nginx:
    image: geometalab/fog-proxy
    command: dockerize -wait tcp://backend:8080 -timeout 60s  nginx -g "daemon off;"
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./tiles:/data/tiles
    ports:
      - '8090:80'
    environment:
      VIRTUAL_HOST: 'localhost,?<domain>.+$$'
      EXTERNAL_HIGHFOG_SERVICE_URL: 'http://localhost:8090/api/'
      FOG_TILES_URL: 'http://localhost:8090/tiles/'
